{"tagline":"Proximal Newton OPTimizer","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"PNOPT","body":"PNOPT (pronounced _pee-en-opt_) is a MATLAB package that uses proximal Newton-type methods to solve convex optimization problems in composite form. For the details, please refer to [the PNOPT paper](http://arxiv.org/abs/1206.1623). \r\n\r\n## Installation\r\nUnpack the archive and add the ```yuekai-PNOPT-xxxxxxx``` directory to your MATLAB search path, _e.g._ \r\n```\r\naddpath /home/yuekai/matlab/yuekai-PNOPT-xxxxxxx/\r\n```\r\n\r\n## Usage\r\nPNOPT shares a similar interface with [TFOCS](http://tfocs.stanford.edu/), a popular MATLAB package for solving convex optimization problems in composite form:\r\n```\r\n[x, f, output] = pnopt(smoothF, nonsmoothF, x0, options);\r\n```\r\nThe required input arguments are:\r\n* ```smoothF```: a smooth function\r\n* ```nonsmoothF```: a nonsmooth function \r\n* ```x0```: a starting point for the solver\r\n\r\nThe user can also supply an ```options``` structure created using the ```pnopt_optimset``` function to customize the behavior of PNOPT. Calling ```pnopt_optimset``` with no inputs lists available options and their default values.\r\n\r\nPNOPT returns:\r\n* ```x```: an optimal solution\r\n* ```f```: the optimal value\r\n* ```output```: a structure containing information collected during the execution of PNOPT.\r\n\r\n### Creating the smooth and nonsmooth functions\r\nPNOPT is compatible with the function generators included with TFOCS so the easiest method to create smooth and nonsmooth functions is to use these function generators. For details, please refer to section 3 of [the TFOCS user guide](http://tfocs.stanford.edu/tfocs_userguide.pdf).\r\n\r\nIf you create your own smooth or nonsmooth function, \r\n* ```smoothF(x)``` should return the function value and gradient at ```x```, _i.e._ ```[fx, gradx] = smoothF(x)```,\r\n* ```nonsmoothF(x)``` should return function value at ```x```, _i.e._```fx = nonsmoothF(x)```,\r\n* ```nonsmoothF(x,t)``` should return the proximal point ```y``` and the function value at ```y```, _i.e._```[fy, y] = smoothF(x,t)```.\r\n"}